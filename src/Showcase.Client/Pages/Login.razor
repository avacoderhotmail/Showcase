@page "/login"
@using Showcase.Contracts.Contracts.Auth
@using Showcase.Client.Services
@inject IAuthApiService AuthService
@inject NavigationManager Nav
@inject ApiAuthenticationStateProvider AuthStateProvider

<h3>Login</h3>

<div class="mb-2">
    <input class="form-control" @bind="Model.Email" placeholder="Email" />
</div>
<div class="mb-2">
    <input class="form-control" @bind="Model.Password" type="password" placeholder="Password" />
</div>
<button class="btn btn-primary"
        @onclick="HandleLogin"
        disabled="@isLoading">
    @(isLoading ? "Logging in..." : "Login")
</button>


@if (!string.IsNullOrEmpty(Message))
{
    <div class="mt-2 text-danger">@Message</div>
}
@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
@code {
    // Use a mutable model for binding
    private LoginModel Model = new LoginModel();
    private string? Message;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        Message = null;

        try
        {
            isLoading = true;

            var result = await AuthService.LoginAsync(new LoginRequestDto(Model.Email, Model.Password));

            if (result != null && !string.IsNullOrEmpty(result.Token))
            {
                // Save token
                await AuthService.SetTokenAsync(result.Token);

                // Tell the provider that we're authenticated
                if (AuthStateProvider is ApiAuthenticationStateProvider apiAuthProvider)
                {
                    apiAuthProvider.NotifyUserAuthentication(result.Token);
                }

                // Redirect
                Nav.NavigateTo("/");
            }
            else
            {
                Message = "Login failed. Check your credentials.";
            }
        }
        catch (Exception ex)
        {
            Message = $"Login error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await HandleLogin();
        }
    }



    private class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
