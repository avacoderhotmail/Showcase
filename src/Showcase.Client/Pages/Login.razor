@page "/login"
@using Showcase.Contracts.Contracts.Auth
@using Showcase.Client.Services
@using System.ComponentModel.DataAnnotations
@inject IAuthApiService AuthService
@inject NavigationManager Nav
@inject ApiAuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS
<h3>Login</h3>

<EditForm Model="@Model" OnValidSubmit="HandleLogin" @ref="editFormRef">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <input id="emailInput" class="form-control" @bind-value="Model.Email" @onkeydown="HandleKeyDown" placeholder="Email" />
        <ValidationMessage For="@(() => Model.Email)" />
    </div>
    <div class="mb-2">
        <input id="passwordInput" class="form-control" @bind-value="Model.Password" @onkeydown="HandleKeyDown" type="password" placeholder="Password" />
        <ValidationMessage For="@(() => Model.Password)" />
    </div>
    <button class="btn btn-primary"
            type="submit"
            disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm"></span>
            <span>Logging In...</span>
        }
        else
        {
            <span>Login</span>
        }
    </button>
    <div>
        <em><strong>NOTE:</strong></em> The first attempt to log in may timeout waiting for API cold start. Just hit the Login button again.
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="mt-2 text-danger">@Message</div>
}


@code {
    // Use a mutable model for binding
    private LoginModel Model = new LoginModel();
    private string? Message;
    private bool isLoading = false;
    private EditForm? editFormRef;

    private ElementReference emailInput;
    private ElementReference passwordInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JS.InvokeVoidAsync("focusHelper.focusById", "emailInput");
    }


    private async Task HandleLogin()
    {
        if (isLoading)
            return;

        Message = null;
        isLoading = true;

        try
        {
            var result = await AuthService.LoginAsync(new LoginRequestDto(Model.Email, Model.Password));

            if (result != null && !string.IsNullOrEmpty(result.Token))
            {
                // Save token
                await AuthService.SetTokenAsync(result.Token);

                // Tell the provider that we're authenticated
                if (AuthStateProvider is ApiAuthenticationStateProvider apiAuthProvider)
                {
                    apiAuthProvider.NotifyUserAuthentication(result.Token);
                }

                // Redirect
                Nav.NavigateTo("/");
            }
            else
            {
                Message = "Login failed. Check your credentials.";
                await JS.InvokeVoidAsync("focusHelper.focusById", "passwordInput");
            }
        }
        catch (Exception ex)
        {
            Message = "Unexpected error during login.";
            await JS.InvokeVoidAsync("focusHelper.focusById", "passwordInput");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Code is not ("Enter" or "NumpadEnter"))
            return;

        var ec = editFormRef?.EditContext;
        if (ec == null)
            return;

        // run synchronous validation through DataAnnotationsValidator
        var isValid = ec.Validate();
        if (isValid)
            await HandleLogin();
    }


    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
