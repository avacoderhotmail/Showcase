@page "/roles"
@using Microsoft.AspNetCore.Authorization
@using Showcase.Client.Services
@inject IRoleApiService RoleService
@attribute [Authorize(Roles = "Admin, UserManager")]

<div class="border rounded p-3 mb-3">
    <h3>Roles</h3>

    @if (roles == null)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
            <p><em>Loading...</em></p>
        </div>
    }
    else
    {
        <ul>
            @foreach (var role in roles)
            {
                <li>@role</li>
            }
        </ul>
    }
</div>
<div class="border rounded p-3 mb-3">
    <h4>Create New Role</h4>
    <input class="mb-3"
           @bind-value="newRoleName"
           @bind-value:event="oninput"
           placeholder="Role name" />
    <div>
        <button @onclick="CreateRole"
                class="btn btn-sm btn-primary"
                disabled="@string.IsNullOrWhiteSpace(newRoleName)">
            Create Role
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

@code {
    private IEnumerable<string>? roles;
    private string newRoleName = string.Empty;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        roles = await RoleService.GetRolesAsync();
    }

    private async Task CreateRole()
    {
        if (!string.IsNullOrWhiteSpace(newRoleName))
        {
            var success = await RoleService.CreateRoleAsync(newRoleName);
            message = success ? $"Role '{newRoleName}' created." : "Failed to create role.";
            newRoleName = string.Empty;
            await LoadRoles();
        }
    }
}
