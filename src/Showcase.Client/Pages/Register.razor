@page "/register"
@using Showcase.Client.Services
@using Showcase.Contracts.Contracts.Auth
@inject IAuthApiService AuthService
@inject NavigationManager Nav

<h3>Register</h3>

<div class="mb-2">
    <input class="form-control" @bind="Model.DisplayName" placeholder="Display Name" />
</div>
<div class="mb-2">
    <input class="form-control" @bind="Model.Email" placeholder="Email" />
</div>
<div class="mb-2">
    <input class="form-control" @bind="Model.Password" type="password" placeholder="Password" />
</div>
<div class="mb-2">
    <input class="form-control" @bind="Model.ConfirmPassword" type="password" placeholder="Confirm Password" />
</div>
<button class="btn btn-primary" @onclick="HandleRegister">Register</button>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="mt-2 text-danger">@Message</div>
}

@code {
    private RegisterModel Model = new RegisterModel();
    private string? Message;

    private async Task HandleRegister()
    {
        Message = null;

        if (Model.Password != Model.ConfirmPassword)
        {
            Message = "Passwords do not match.";
            return;
        }

        try
        {
            // Pass DisplayName as required by DTO constructor
            await AuthService.RegisterAsync(
                new RegisterRequestDto(Model.Email, Model.Password, Model.DisplayName)
            );

            // Registration succeeded → navigate to Login page
            Nav.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
    }

    private class RegisterModel
    {
        public string DisplayName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
