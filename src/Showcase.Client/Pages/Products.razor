@page "/products"
@using Showcase.Client.Shared
@using Microsoft.AspNetCore.Authorization
@using Showcase.Client.Services
@using Showcase.Contracts.Contracts.Product
@inject IProductApiService ProductService
@attribute [Authorize]

<h3>Products</h3>

<button @onclick="ShowModal">+ New Product</button>

@if (products == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>
                        <a class="btn btn-link" href="@($"/products/{product.Id}")">@product.Name</a>
                    </td>
                    <td>@product.Description</td>
                    <td>@product.Price.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>

}

<ReusableModal Title="Create Product" Show="@isModalOpen" ShowChanged="@(value => isModalOpen = value)">
    <ChildContent>
        <EditForm Model="@newProduct" OnValidSubmit="HandleCreate">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3 row">
                <label for="productName" class="col-sm-3 col-form-label">Name:</label>
                <div class="col-sm-9">
                    <InputText id="productName" class="form-control" @bind-Value="newProduct.Name" />
                </div>
            </div>

            <div class="mb-3 row">
                <label for="productDescription" class="col-sm-3 col-form-label">Description:</label>
                <div class="col-sm-9">
                    <InputTextArea id="productDescription" class="form-control" @bind-Value="newProduct.Description" />
                </div>
            </div>

            <div class="mb-3 row">
                <label for="productPrice" class="col-sm-3 col-form-label">Price:</label>
                <div class="col-sm-9">
                    <InputNumber id="productPrice" class="form-control" @bind-Value="newProduct.Price" />
                </div>
            </div>

            <div class="mt-4 d-flex justify-content-end gap-2">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
            </div>
        </EditForm>
    </ChildContent>
</ReusableModal>

@code {
    private List<ProductDto>? products;
    private ProductCreateDto newProduct = new();
    private bool isModalOpen;

    protected override async Task OnInitializedAsync()
    {
        products = (await ProductService.GetProductsAsync()).ToList();
    }

    private void ShowModal()
    {
        newProduct = new ProductCreateDto();
        isModalOpen = true;
    }

    private void CloseModal() => isModalOpen = false;

    private async Task HandleCreate()
    {
        var created = await ProductService.CreateProductAsync(newProduct);
        if (created != null)
        {
            products?.Add(created);
            CloseModal();
        }
    }
}
