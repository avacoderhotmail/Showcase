@page "/products"
@using Showcase.Client.Shared
@using Microsoft.AspNetCore.Authorization
@using Showcase.Client.Services
@using Showcase.Contracts.Contracts.Product
@inject IProductApiService ProductService
@attribute [Authorize]

<h3>Products</h3>

<button @onclick="ShowModal">+ New Product</button>

@if (products == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>

}

<ReusableModal IsOpen="@isModalOpen" Title="Create Product" OnClose="CloseModal">
    <EditForm Model="@newProduct" OnValidSubmit="HandleCreate">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Name:</label>
            <InputText @bind-Value="newProduct.Name" />
        </div>

        <div>
            <label>Description:</label>
            <InputTextArea @bind-Value="newProduct.Description" />
        </div>

        <div>
            <label>Price:</label>
            <InputNumber @bind-Value="newProduct.Price" />
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
        </div>
    </EditForm>

</ReusableModal>

@code {
    private List<ProductDto>? products;
    private ProductCreateDto newProduct = new();
    private bool isModalOpen;

    protected override async Task OnInitializedAsync()
    {
        products = (await ProductService.GetProductsAsync()).ToList();
    }

    private void ShowModal()
    {
        newProduct = new ProductCreateDto();
        isModalOpen = true;
    }

    private void CloseModal() => isModalOpen = false;

    private async Task HandleCreate()
    {
        var created = await ProductService.CreateProductAsync(newProduct);
        if (created != null)
        {
            products?.Add(created);
            CloseModal();
        }
    }
}
