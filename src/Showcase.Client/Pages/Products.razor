@page "/products"
@using Microsoft.AspNetCore.Components.Authorization
@using Showcase.Client.Shared
@using Microsoft.AspNetCore.Authorization
@using Showcase.Client.Services
@using Showcase.Contracts.Contracts.Product
@inject IProductApiService ProductService
@inject IJSRuntime JS
@attribute [Authorize]

<h3>Products</h3>


@if (products == null)
{
    <p>Loading...</p>
}
else
{
    <AuthorizeView Roles="Admin, ProductManager">
        <Authorized>
            <button @onclick="ShowModal" class="btn btn-sm btn-primary">+ New Product</button>
        </Authorized>
    </AuthorizeView>
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <AuthorizeView Roles="Admin, ProductManager">
                    <Authorized>
                        <th>Actions</th>
                    </Authorized>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img src="@product.ImageUrl" alt="@product.Name" style="max-width:100px; max-height:100px;" />
                        }
                    </td>

                    <td>
                        <a class="btn btn-link" href="@($"/products/{product.Id}")">@product.Name</a>
                    </td>
                    <td>@product.Description</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>
                        <AuthorizeView Roles="Admin, ProductManager">
                            <Authorized>
                                <button type="button" class="btn btn-sm btn-warning" @onclick="() => EditProduct(product)">Edit</button>
                                <button type="button" class="btn btn-sm btn-danger" @onclick="() => ConfirmDeleteProduct(product)">Delete</button>
                            </Authorized>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

<ReusableModal Title="@(isEditMode ? "Edit Product" : "Create Product")" Show="@isModalOpen" ShowChanged="@(value => isModalOpen = value)">
    <ChildContent>
        <EditForm Model="@newProduct" OnValidSubmit="HandleCreate">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @if (isEditMode)
            {
                <div class="mb-3 row">
                    <label for="productName" class="col-sm-3 col-form-label">Name:</label>
                    <div class="col-sm-9">
                        <InputText id="productName" class="form-control" @bind-Value="updateProduct.Name" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <label for="productDescription" class="col-sm-3 col-form-label">Description:</label>
                    <div class="col-sm-9">
                        <InputTextArea id="productDescription" class="form-control" @bind-Value="updateProduct.Description" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <label for="productPrice" class="col-sm-3 col-form-label">Price:</label>
                    <div class="col-sm-9">
                        <InputNumber id="productPrice" class="form-control" @bind-Value="updateProduct.Price" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <label for="productImage" class="col-sm-3 col-form-label">Image:</label>
                    <div class="col-sm-9">
                        <InputFile OnChange="OnInputFileChange" />
                        @if (!string.IsNullOrEmpty(previewImageUrl))
                        {
                            <img src="@previewImageUrl" alt="Preview" style="max-width:150px; max-height:150px; margin-top:10px;" />
                        }
                    </div>
                </div>
            }
            else
            {

                <div class="mb-3 row">
                    <label for="productName" class="col-sm-3 col-form-label">Name:</label>
                    <div class="col-sm-9">
                        <InputText id="productName" class="form-control" @bind-Value="newProduct.Name" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <label for="productDescription" class="col-sm-3 col-form-label">Description:</label>
                    <div class="col-sm-9">
                        <InputTextArea id="productDescription" class="form-control" @bind-Value="newProduct.Description" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <label for="productPrice" class="col-sm-3 col-form-label">Price:</label>
                    <div class="col-sm-9">
                        <InputNumber id="productPrice" class="form-control" @bind-Value="newProduct.Price" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <label for="productImage" class="col-sm-3 col-form-label">Image:</label>
                    <div class="col-sm-9">
                        <InputFile OnChange="OnInputFileChange" />
                        @if (!string.IsNullOrEmpty(previewImageUrl))
                        {
                            <img src="@previewImageUrl" alt="Preview" style="max-width:150px; max-height:150px; margin-top:10px;" />
                        }
                    </div>
                </div>
            }
            <div class="mt-4 d-flex justify-content-end gap-2">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
            </div>
        </EditForm>
    </ChildContent>
</ReusableModal>

@code {
    private List<ProductDto>? products;
    private ProductCreateDto newProduct = new();
    private ProductUpdateDto updateProduct = new();
    private string? errorMessage;
    private bool isEditMode = false;
    private bool isModalOpen;
    private bool isSubmitting = false;
    private int editingProductId;
    private IBrowserFile? selectedImageFile;
    private string? previewImageUrl;

    protected override async Task OnInitializedAsync()
    {
        products = (await ProductService.GetProductsAsync()).ToList();
    }

    private void ShowModal()
    {
        isEditMode = false;
        editingProductId = 0;
        newProduct = new ProductCreateDto();
        updateProduct = new ProductUpdateDto();
        selectedImageFile = null;
        previewImageUrl = null;
        isModalOpen = true;
    }

    private void CloseModal() => isModalOpen = false;

    private async Task HandleCreate()
    {
        if (isEditMode)
        {
            await ProductService.UpdateProductAsync(editingProductId, updateProduct, selectedImageFile);
            products = (await ProductService.GetProductsAsync()).ToList();
            CloseModal();
        }
        else
        {
            var created = await ProductService.CreateProductAsync(newProduct, selectedImageFile);
            if (created != null)
            {
                products?.Add(created);
                CloseModal();
            }
        }

        selectedImageFile = null;
        previewImageUrl = null;
    }

    private void EditProduct(ProductDto product)
    {
        isEditMode = true;
        editingProductId = product.Id; // adjust to your actual ProductDto ID property
        updateProduct = new ProductUpdateDto
        {
            Name = product.Name,
            Description = product.Description,
            Price = product.Price
        };
        isModalOpen = true;
    }

    private async Task ConfirmDeleteProduct(ProductDto product)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", $"Delete product {product.Name}?");
        if (confirm)
        {
            await DeleteProduct(product);
        }
    }

    private async Task DeleteProduct(ProductDto product)
    {
        isSubmitting = true;
        try
        {
            var result = await ProductService.DeleteProductAsync(product.Id); // Implement this API
            if (result)
            {
                products?.Remove(product);
            }
            else
            {
                errorMessage = "Deletion failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting product: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedImageFile = e.File;
        long maxPreviewSize = 2 * 1024 * 1024;
        using var stream = selectedImageFile.OpenReadStream(maxPreviewSize);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        previewImageUrl = $"data:{selectedImageFile.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
    }
}

